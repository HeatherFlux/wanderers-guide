generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ancestries {
  id                                                                 Int               @id @default(autoincrement())
  name                                                               String?           @db.VarChar(45)
  rarity                                                             ancestries_rarity @default(COMMON)
  hitPoints                                                          Int?
  size                                                               ancestries_size?  @default(MEDIUM)
  speed                                                              Int?
  description                                                        String?           @db.Text
  visionSenseID                                                      Int?
  additionalSenseID                                                  Int?
  physicalFeatureOneID                                               Int?
  physicalFeatureTwoID                                               Int?
  tagID                                                              Int?
  artworkURL                                                         String?           @db.VarChar(200)
  isArchived                                                         Boolean           @default(false)
  contentSrc                                                         String            @default("CRB") @db.VarChar(45)
  homebrewID                                                         Int?
  version                                                            String?           @db.VarChar(90)
  createdAt                                                          DateTime?         @db.DateTime(0)
  updatedAt                                                          DateTime?         @db.DateTime(0)
  senseTypes_ancestries_additionalSenseIDTosenseTypes                senseTypes?       @relation("ancestries_additionalSenseIDTosenseTypes", fields: [additionalSenseID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ancestry_additionalSenseID")
  homebrewBundles                                                    homebrewBundles?  @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "ancestry_homebrewID")
  physicalFeatures_ancestries_physicalFeatureOneIDTophysicalFeatures physicalFeatures? @relation("ancestries_physicalFeatureOneIDTophysicalFeatures", fields: [physicalFeatureOneID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ancestry_physicalFeatureOneID")
  physicalFeatures_ancestries_physicalFeatureTwoIDTophysicalFeatures physicalFeatures? @relation("ancestries_physicalFeatureTwoIDTophysicalFeatures", fields: [physicalFeatureTwoID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ancestry_physicalFeatureTwoID")
  tags                                                               tags?             @relation(fields: [tagID], references: [id], onUpdate: SetNull, map: "ancestry_tagID")
  senseTypes_ancestries_visionSenseIDTosenseTypes                    senseTypes?       @relation("ancestries_visionSenseIDTosenseTypes", fields: [visionSenseID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ancestry_visionSenseID")
  builds                                                             builds[]
  characters                                                         characters[]

  @@index([additionalSenseID], map: "ancestry_additionalSenseID_idx")
  @@index([homebrewID], map: "ancestry_homebrewID_idx")
  @@index([physicalFeatureOneID], map: "ancestry_physicalFeatureOneID_idx")
  @@index([physicalFeatureTwoID], map: "ancestry_physicalFeatureTwoID_idx")
  @@index([tagID], map: "ancestry_tagID_idx")
  @@index([visionSenseID], map: "ancestry_visionTypeID_idx")
}

model armors {
  id           Int               @id @default(autoincrement())
  itemID       Int?
  profName     String?           @db.VarChar(45)
  acBonus      Int?
  dexCap       Int?
  checkPenalty Int?
  speedPenalty Int?
  minStrength  Int?
  armorType    armors_armorType?
  category     armors_category?
  createdAt    DateTime?         @db.DateTime(0)
  updatedAt    DateTime?         @db.DateTime(0)
  items        items?            @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "armor_itemID")

  @@index([itemID], map: "armor_itemID_idx")
}

model backgrounds {
  id              Int                @id @default(autoincrement())
  name            String?            @db.VarChar(45)
  rarity          backgrounds_rarity @default(COMMON)
  description     String?            @db.MediumText
  boostOne        String?            @db.VarChar(60)
  boostTwo        String?            @db.VarChar(60)
  code            String?            @db.VarChar(1000)
  isArchived      Boolean            @default(false)
  contentSrc      String             @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  version         String?            @db.VarChar(90)
  createdAt       DateTime?          @db.DateTime(0)
  updatedAt       DateTime?          @db.DateTime(0)
  homebrewBundles homebrewBundles?   @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "backgrounds_homebrewID")
  builds          builds[]
  characters      characters[]

  @@index([homebrewID])
}

model campaigns {
  id                        Int                    @id @default(autoincrement())
  accessID                  String                 @unique(map: "accessID_UNIQUE") @db.VarChar(60)
  userID                    Int
  name                      String?                @db.VarChar(120)
  description               String?                @db.VarChar(4000)
  imageURL                  String?                @db.VarChar(300)
  optionDisplayPlayerHealth Int                    @default(1)
  createdAt                 DateTime?              @db.DateTime(0)
  updatedAt                 DateTime?              @db.DateTime(0)
  campaignAccessTokens      campaignAccessTokens[]
  users                     users                  @relation(fields: [userID], references: [id], onDelete: Cascade, map: "userID_campaign")

  @@index([userID], map: "userID_campaign_idx")
}

model characters {
  id                                    Int                    @id @default(autoincrement())
  userID                                Int?
  buildID                               Int?
  name                                  String?                @db.VarChar(45)
  level                                 Int                    @default(1)
  experience                            Int                    @default(0)
  currentHealth                         Int?
  tempHealth                            Int?
  heroPoints                            Int?                   @default(1)
  currentStamina                        Int?
  currentResolve                        Int?
  dataID                                Int?
  ancestryID                            Int?
  heritageID                            Int?
  uniHeritageID                         Int?
  backgroundID                          Int?
  classID                               Int?
  classID_2                             Int?
  inventoryID                           Int?
  notes                                 String?                @db.MediumText
  infoJSON                              String?                @db.VarChar(3000)
  rollHistoryJSON                       String?                @db.VarChar(8000)
  details                               String?                @db.Text
  customCode                            String?                @db.VarChar(2000)
  builderByLevel                        Boolean                @default(false)
  optionAutoDetectPreReqs               Boolean                @default(true)
  optionAutoHeightenSpells              Boolean                @default(false)
  optionPublicCharacter                 Boolean                @default(false)
  optionCustomCodeBlock                 Boolean                @default(false)
  optionClassArchetypes                 Boolean                @default(true)
  optionDiceRoller                      Boolean                @default(false)
  optionIgnoreBulk                      Boolean                @default(false)
  optionAltAbilityBoosts                Boolean                @default(false)
  variantProfWithoutLevel               Boolean                @default(false)
  variantFreeArchetype                  Boolean                @default(false)
  variantAncestryParagon                Boolean                @default(false)
  variantStamina                        Boolean                @default(false)
  variantAutoBonusProgression           Boolean                @default(false)
  variantGradualAbilityBoosts           Boolean                @default(false)
  enabledSources                        String                 @default("[\"CRB\",\"ADV-PLAYER-GUIDE\",\"GM-GUIDE\"]") @db.VarChar(4000)
  enabledHomebrew                       String                 @default("[null]") @db.VarChar(6000)
  createdAt                             DateTime?              @db.DateTime(0)
  updatedAt                             DateTime?              @db.DateTime(0)
  accessTokens                          accessTokens[]
  calculatedStats                       calculatedStats?
  campaignAccessTokens                  campaignAccessTokens?
  charAnimalCompanions                  charAnimalCompanions[]
  charConditions                        charConditions[]
  charDataMappings                      charDataMappings[]
  charFamiliars                         charFamiliars[]
  ancestries                            ancestries?            @relation(fields: [ancestryID], references: [id], onUpdate: SetNull, map: "char_ancestryID")
  backgrounds                           backgrounds?           @relation(fields: [backgroundID], references: [id], onUpdate: SetNull, map: "char_backgroundID")
  builds                                builds?                @relation(fields: [buildID], references: [id], onUpdate: SetNull, map: "char_buildID")
  classes                               classes?               @relation(fields: [classID], references: [id], onUpdate: SetNull, map: "char_classID")
  classes_characters_classID_2Toclasses classes?               @relation("characters_classID_2Toclasses", fields: [classID_2], references: [id], onUpdate: SetNull, map: "char_classID_2")
  heritages                             heritages?             @relation(fields: [heritageID], references: [id], onUpdate: SetNull, map: "char_heritageID")
  inventories                           inventories?           @relation(fields: [inventoryID], references: [id], onDelete: Cascade, map: "char_inventoryID")
  uniHeritages                          uniHeritages?          @relation(fields: [uniHeritageID], references: [id], onUpdate: SetNull, map: "char_uniHeritageID")
  users                                 users?                 @relation(fields: [userID], references: [id], onDelete: Cascade, map: "char_userID")
  noteFields                            noteFields[]
  spellbookSpells                       spellbookSpells[]

  @@index([ancestryID], map: "char_ancestryID_idx")
  @@index([backgroundID], map: "char_backgroundID_idx")
  @@index([buildID], map: "char_buildID_idx")
  @@index([classID_2], map: "char_classID_2_idx")
  @@index([classID], map: "char_classID_idx")
  @@index([heritageID], map: "char_heritageID_idx")
  @@index([inventoryID], map: "char_inventoryID_idx")
  @@index([uniHeritageID], map: "char_uniHeritageID_idx")
  @@index([userID], map: "char_userID_idx")
}

model classes {
  id                                       Int              @id @default(autoincrement())
  name                                     String?          @db.VarChar(45)
  rarity                                   classes_rarity   @default(COMMON)
  description                              String?          @db.Text
  keyAbility                               String?          @db.VarChar(45)
  hitPoints                                Int?
  tPerception                              String           @default("T") @db.VarChar(5)
  tFortitude                               String           @default("T") @db.VarChar(5)
  tReflex                                  String           @default("T") @db.VarChar(5)
  tWill                                    String           @default("T") @db.VarChar(5)
  tClassDC                                 String           @default("T") @db.VarChar(5)
  tSkills                                  String?          @db.VarChar(60)
  tSkillsMore                              Int?
  tWeapons                                 String?          @db.VarChar(300)
  weaponsExtra                             String?          @db.VarChar(500)
  tArmor                                   String?          @db.VarChar(300)
  tagID                                    Int?
  artworkURL                               String?          @db.VarChar(200)
  code                                     String?          @db.VarChar(1000)
  isArchived                               Boolean          @default(false)
  contentSrc                               String           @default("CRB") @db.VarChar(45)
  homebrewID                               Int?
  version                                  String?          @db.VarChar(90)
  createdAt                                DateTime?        @db.DateTime(0)
  updatedAt                                DateTime?        @db.DateTime(0)
  builds_builds_classIDToclasses           builds[]         @relation("builds_classIDToclasses")
  builds_builds_classID_2Toclasses         builds[]         @relation("builds_classID_2Toclasses")
  characters                               characters[]
  characters_characters_classID_2Toclasses characters[]     @relation("characters_classID_2Toclasses")
  classAbilities                           classAbilities[]
  homebrewBundles                          homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "classes_homebrewID")
  tags                                     tags?            @relation(fields: [tagID], references: [id], onUpdate: SetNull, map: "classes_tagID")

  @@index([homebrewID], map: "classes_homebrewID")
  @@index([tagID])
}

model conditions {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(45)
  description    String?          @db.Text
  hasValue       Boolean          @default(false)
  code           String?          @db.VarChar(1000)
  createdAt      DateTime?        @db.DateTime(0)
  updatedAt      DateTime?        @db.DateTime(0)
  charConditions charConditions[]
}

model domains {
  id                                     Int              @id @default(autoincrement())
  name                                   String?          @db.VarChar(45)
  description                            String?          @db.TinyText
  initialSpellID                         Int?
  advancedSpellID                        Int?
  contentSrc                             String           @default("CRB") @db.VarChar(45)
  homebrewID                             Int?
  createdAt                              DateTime?        @db.DateTime(0)
  updatedAt                              DateTime?        @db.DateTime(0)
  spells_domains_advancedSpellIDTospells spells?          @relation("domains_advancedSpellIDTospells", fields: [advancedSpellID], references: [id], onUpdate: SetNull, map: "domain_advancedSpellID")
  homebrewBundles                        homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "domain_homebrewID")
  spells_domains_initialSpellIDTospells  spells?          @relation("domains_initialSpellIDTospells", fields: [initialSpellID], references: [id], onUpdate: SetNull, map: "domain_initialSpellID")

  @@index([advancedSpellID], map: "domain_advancedSpellID_idx")
  @@index([homebrewID], map: "domain_homebrewID")
  @@index([initialSpellID], map: "domain_initialSpellID_idx")
}

model creatures {
  id                       String           @id @db.VarChar(45)
  name                     String?          @db.VarChar(120)
  level                    Int
  rarity                   creatures_rarity
  alignment                String?          @db.VarChar(5)
  size                     creatures_size
  traitsJSON               String?          @db.VarChar(450)
  familyType               String?          @db.VarChar(120)
  perceptionBonus          Int?
  senses                   String?          @db.VarChar(450)
  languagesJSON            String?          @db.VarChar(450)
  languagesCustom          String?          @db.VarChar(600)
  skillsJSON               String?          @db.VarChar(900)
  itemsJSON                String?          @db.VarChar(3000)
  strMod                   Int              @default(0)
  dexMod                   Int              @default(0)
  conMod                   Int              @default(0)
  intMod                   Int              @default(0)
  wisMod                   Int              @default(0)
  chaMod                   Int              @default(0)
  interactionAbilitiesJSON String?          @db.Text
  acValue                  Int              @default(10)
  fortBonus                Int              @default(0)
  reflexBonus              Int
  willBonus                Int              @default(0)
  allSavesCustom           String?          @db.VarChar(600)
  hpMax                    Int              @default(100)
  hpDetails                String?          @db.VarChar(450)
  immunitiesJSON           String?          @db.VarChar(600)
  weaknessesJSON           String?          @db.VarChar(600)
  resistancesJSON          String?          @db.VarChar(600)
  defensiveAbilitiesJSON   String?          @db.Text
  speed                    Int              @default(25)
  otherSpeedsJSON          String?          @db.VarChar(450)
  attacksJSON              String?          @db.VarChar(1600)
  spellcastingJSON         String?          @db.VarChar(3000)
  offensiveAbilitiesJSON   String?          @db.Text
  flavorText               String?          @db.Text
  contentSrc               String           @default("CRB") @db.VarChar(45)
  homebrewID               Int?
  createdAt                DateTime?        @db.DateTime(0)
  updatedAt                DateTime?        @db.DateTime(0)
  homebrewbundles          homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "creatures_homebrewID")

  @@index([homebrewID])
}

model feats {
  id                Int                @id @default(autoincrement())
  name              String?            @default("Unnamed Feat") @db.VarChar(60)
  actions           feats_actions?     @default(NONE)
  level             Int
  rarity            feats_rarity       @default(COMMON)
  prerequisites     String?            @db.VarChar(300)
  frequency         String?            @db.VarChar(300)
  cost              String?            @db.VarChar(300)
  trigger           String?            @db.VarChar(300)
  requirements      String?            @db.VarChar(600)
  description       String?            @db.Text
  special           String?            @db.VarChar(600)
  canSelectMultiple Boolean?           @default(false)
  isDefault         Boolean?           @default(false)
  skillID           Int?
  minProf           String?            @db.VarChar(3)
  code              String?            @db.VarChar(5000)
  isCore            Boolean            @default(false)
  genericType       feats_genericType?
  genTypeName       String?            @db.VarChar(45)
  isArchived        Boolean            @default(false)
  contentSrc        String             @default("CRB") @db.VarChar(45)
  homebrewID        Int?
  version           String?            @db.VarChar(90)
  createdAt         DateTime?          @db.DateTime(0)
  updatedAt         DateTime?          @db.DateTime(0)
  archetypes        archetypes[]
  featTags          featTags[]
  homebrewBundles   homebrewBundles?   @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "feats_homebrewID")
  skills            skills?            @relation(fields: [skillID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "feats_skillID")

  @@index([homebrewID], map: "feats_homebrewID")
  @@index([skillID])
}

model extras {
  id              Int              @id @default(autoincrement())
  name            String?          @default("Unnamed Extra") @db.VarChar(60)
  price           Int?
  level           Int              @default(0)
  rarity          extras_rarity    @default(COMMON)
  size            extras_size      @default(MEDIUM)
  description     String?          @db.Text
  hitPoints       Int?
  brokenThreshold Int?
  hardness        Int?
  type            String           @default("OTHER") @db.VarChar(45)
  isArchived      Boolean          @default(false)
  contentSrc      String           @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "extras_homebrewID")
  taggedExtras    taggedExtras[]

  @@index([homebrewID])
}

model heritages {
  id                Int              @id @default(autoincrement())
  name              String?          @db.VarChar(45)
  ancestryID        Int?
  rarity            heritages_rarity @default(COMMON)
  description       String?          @db.Text
  code              String?          @db.VarChar(5000)
  isArchived        Boolean          @default(false)
  contentSrc        String           @default("CRB") @db.VarChar(45)
  indivAncestryName String?          @db.VarChar(45)
  homebrewID        Int?
  createdAt         DateTime?        @db.DateTime(0)
  updatedAt         DateTime?        @db.DateTime(0)
  builds            builds[]
  characters        characters[]
  homebrewBundles   homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "heritage_homebrewID")

  @@index([homebrewID], map: "heritage_homebrewID_idx")
}

model inventories {
  id                                                     Int              @id @default(autoincrement())
  equippedArmorInvItemID                                 Int?
  equippedShieldInvItemID                                Int?
  equippedArmorCategory                                  armors_category?
  createdAt                                              DateTime?        @db.DateTime(0)
  updatedAt                                              DateTime?        @db.DateTime(0)
  characters                                             characters[]
  invItems_invItems_invIDToinventories                   invItems[]       @relation("invItems_invIDToinventories")
  invItems_invItemsToinventories_equippedArmorInvItemID  invItems?        @relation("invItemsToinventories_equippedArmorInvItemID", fields: [equippedArmorInvItemID], references: [id], onUpdate: SetNull, map: "inv_armorInvItemID")
  invItems_invItemsToinventories_equippedShieldInvItemID invItems?        @relation("invItemsToinventories_equippedShieldInvItemID", fields: [equippedShieldInvItemID], references: [id], onUpdate: SetNull, map: "inv_shieldInvItemID")

  @@index([equippedArmorInvItemID], map: "inv_armorInvItemID_idx")
  @@index([equippedShieldInvItemID], map: "inv_shieldInvItemID_idx")
}

model items {
  id                Int                  @id @default(autoincrement())
  name              String?              @db.VarChar(45)
  price             Int?
  bulk              Float?
  level             Int?                 @default(0)
  rarity            items_rarity?        @default(COMMON)
  description       String?              @db.Text
  itemType          items_itemType?
  hands             items_hands          @default(NONE)
  size              items_size           @default(MEDIUM)
  craftRequirements String?              @db.VarChar(380)
  usage             String?              @db.VarChar(120)
  isShoddy          Boolean              @default(false)
  hasQuantity       Boolean              @default(false)
  quantity          Int                  @default(1)
  materialType      String?              @db.VarChar(45)
  hitPoints         Int?
  brokenThreshold   Int?
  hardness          Int?
  hidden            Boolean              @default(false)
  code              String?              @db.VarChar(1000)
  itemStructType    items_itemStructType @default(GENERAL)
  isArchived        Boolean              @default(false)
  contentSrc        String               @default("CRB") @db.VarChar(45)
  homebrewID        Int?
  version           String?              @db.VarChar(90)
  createdAt         DateTime?            @db.DateTime(0)
  updatedAt         DateTime?            @db.DateTime(0)
  armors            armors[]
  invItems          invItems[]
  itemRunes         itemRunes[]
  homebrewBundles   homebrewBundles?     @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "items_homebrewID")
  physicalFeatures  physicalFeatures[]
  shields           shields[]
  storages          storages[]
  taggedItems       taggedItems[]
  weapons           weapons[]

  @@index([homebrewID])
}

model languages {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(45)
  speakers          String?             @db.VarChar(120)
  script            String?             @db.VarChar(45)
  description       String?             @db.Text
  contentSrc        String              @default("CRB") @db.VarChar(45)
  homebrewID        Int?
  createdAt         DateTime?           @db.DateTime(0)
  updatedAt         DateTime?           @db.DateTime(0)
  ancestryLanguages ancestryLanguages[]
  homebrewBundles   homebrewBundles?    @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "languages_homebrewID")

  @@index([homebrewID], map: "languages_homebrewID")
}

model shields {
  id           Int       @id @default(autoincrement())
  itemID       Int?
  profName     String?   @db.VarChar(45)
  acBonus      Int?
  speedPenalty Int?
  createdAt    DateTime? @db.DateTime(0)
  updatedAt    DateTime? @db.DateTime(0)
  items        items?    @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "shield_itemID")

  @@index([itemID], map: "shield_itemID_idx")
}

model skills {
  id          Int             @id @default(autoincrement())
  name        String?         @db.VarChar(45)
  ability     skills_ability? @default(INT)
  description String?         @db.Text
  createdAt   DateTime?       @db.DateTime(0)
  updatedAt   DateTime?       @db.DateTime(0)
  feats       feats[]
}

model books {
  codeName    String    @id @db.VarChar(45)
  name        String    @db.VarChar(180)
  url         String?   @db.VarChar(300)
  description String?   @db.MediumText
  code        String?   @db.VarChar(10000)
  createdAt   DateTime? @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
}

model spells {
  id                                      Int                 @id @default(autoincrement())
  name                                    String?             @db.VarChar(45)
  level                                   Int?
  traditions                              String?             @db.VarChar(45)
  cast                                    String?             @db.VarChar(45)
  castingComponents                       String?             @db.VarChar(45)
  cost                                    String?             @db.VarChar(300)
  trigger                                 String?             @db.VarChar(300)
  requirements                            String?             @db.VarChar(300)
  range                                   String?             @db.VarChar(300)
  area                                    String?             @db.VarChar(300)
  targets                                 String?             @db.VarChar(300)
  savingThrow                             spells_savingThrow?
  duration                                String?             @db.VarChar(300)
  rarity                                  spells_rarity?
  description                             String?             @db.Text
  heightenedOneVal                        String?             @db.VarChar(45)
  heightenedOneText                       String?             @db.VarChar(2000)
  heightenedTwoVal                        String?             @db.VarChar(45)
  heightenedTwoText                       String?             @db.VarChar(1000)
  heightenedThreeVal                      String?             @db.VarChar(45)
  heightenedThreeText                     String?             @db.VarChar(1000)
  heightenedFourVal                       String?             @db.VarChar(45)
  heightenedFourText                      String?             @db.VarChar(1000)
  isFocusSpell                            Boolean             @default(false)
  isArchived                              Boolean             @default(false)
  contentSrc                              String              @default("CRB") @db.VarChar(45)
  homebrewID                              Int?
  version                                 String?             @db.VarChar(90)
  createdAt                               DateTime?           @db.DateTime(0)
  updatedAt                               DateTime?           @db.DateTime(0)
  domains_domains_advancedSpellIDTospells domains[]           @relation("domains_advancedSpellIDTospells")
  domains_domains_initialSpellIDTospells  domains[]           @relation("domains_initialSpellIDTospells")
  spellbookSpells                         spellbookSpells[]
  homebrewBundles                         homebrewBundles?    @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "spells_homebrewID")
  taggedSpells                            taggedSpells[]

  @@index([homebrewID])
}

model storages {
  id                      Int       @id @default(autoincrement())
  itemID                  Int?
  maxBulkStorage          Float?
  bulkIgnored             Float?
  ignoreSelfBulkIfWearing Boolean?  @default(false)
  createdAt               DateTime? @db.DateTime(0)
  updatedAt               DateTime? @db.DateTime(0)
  items                   items?    @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "storage_itemID")

  @@index([itemID], map: "storage_itemID_idx")
}

model tags {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(45)
  description     String?          @db.Text
  isImportant     Boolean          @default(false)
  isHidden        Boolean          @default(false)
  isArchived      Boolean          @default(false)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  ancestries      ancestries[]
  archetypes      archetypes[]
  classes         classes[]
  featTags        featTags[]
  taggedExtras    taggedExtras[]
  taggedItems     taggedItems[]
  taggedSpells    taggedSpells[]
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "tag_homebrewID")
  uniHeritages    uniHeritages[]

  @@index([homebrewID], map: "tag_homebrewID")
}

model users {
  id                   Int                    @id @default(autoincrement())
  googleID             String                 @db.VarChar(90)
  redditID             String                 @db.VarChar(90)
  username             String                 @db.VarChar(90)
  thumbnail            String?                @db.VarChar(200)
  isPatreonSupporter   Boolean                @default(false)
  isPatreonMember      Boolean                @default(false)
  isPatreonLegend      Boolean                @default(false)
  isAdmin              Boolean                @default(false)
  isDeveloper          Boolean                @default(false)
  patreonUserID        Int?                   @unique(map: "patreonUserID_UNIQUE")
  patreonFullName      String?                @db.VarChar(120)
  patreonEmail         String?                @db.VarChar(120)
  patreonAccessToken   String?                @db.VarChar(300)
  patreonRefreshToken  String?                @db.VarChar(300)
  enabledLightMode     Boolean                @default(false)
  createdAt            DateTime?              @db.DateTime(0)
  updatedAt            DateTime?              @db.DateTime(0)
  apiClientApps        apiClientApps[]
  builds               builds[]
  campaignAccessTokens campaignAccessTokens[]
  campaigns            campaigns[]
  characters           characters[]
  homeBackReports      homeBackReports[]
  homebrewBundles      homebrewBundles[]
  userHomebrewBundles  userHomebrewBundles[]

  @@unique([googleID, redditID], name: "platform_compIDs", map: "platform_compIDs")
}

model weapons {
  id               Int                       @id @default(autoincrement())
  itemID           Int?
  profName         String?                   @db.VarChar(45)
  diceNum          Int?
  dieType          weapons_dieType
  damageType       String?                   @db.VarChar(45)
  category         weapons_category
  isMelee          Boolean?
  meleeWeaponType  weapons_meleeWeaponType?
  isRanged         Boolean?
  rangedWeaponType weapons_rangedWeaponType?
  rangedRange      Int?
  rangedReload     Int?
  createdAt        DateTime?                 @db.DateTime(0)
  updatedAt        DateTime?                 @db.DateTime(0)
  items            items?                    @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "weapon_itemID")

  @@index([itemID], map: "weapon_itemID_idx")
}

model builds {
  id                                Int                 @id @default(autoincrement())
  userID                            Int?
  name                              String?             @db.VarChar(45)
  description                       String?             @db.Text
  contactInfo                       String?             @db.VarChar(120)
  isPublished                       Boolean             @default(false)
  authorName                        String              @default("Unknown") @db.VarChar(45)
  artworkURL                        String?             @db.VarChar(200)
  finalStatsJSON                    String?             @db.Text
  ancestryID                        Int?
  heritageID                        Int?
  uniHeritageID                     Int?
  backgroundID                      Int?
  classID                           Int?
  classID_2                         Int?
  customCode                        String?             @db.VarChar(2000)
  optionCustomCodeBlock             Boolean             @default(false)
  optionClassArchetypes             Boolean             @default(true)
  variantFreeArchetype              Boolean             @default(false)
  variantAncestryParagon            Boolean             @default(false)
  variantStamina                    Boolean             @default(false)
  variantGradualAbilityBoosts       Boolean             @default(false)
  enabledSources                    String              @default("[\"CRB\",\"ADV-PLAYER-GUIDE\",\"GM-GUIDE\"]") @db.VarChar(4000)
  enabledHomebrew                   String              @default("[null]") @db.VarChar(6000)
  createdAt                         DateTime?           @db.DateTime(0)
  updatedAt                         DateTime?           @db.DateTime(0)
  buildDataMappings                 buildDataMappings[]
  ancestries                        ancestries?         @relation(fields: [ancestryID], references: [id], onUpdate: SetNull, map: "buildAncestryID")
  backgrounds                       backgrounds?        @relation(fields: [backgroundID], references: [id], onUpdate: SetNull, map: "buildBackgroundID")
  classes_builds_classIDToclasses   classes?            @relation("builds_classIDToclasses", fields: [classID], references: [id], onUpdate: SetNull, map: "buildClassID")
  classes_builds_classID_2Toclasses classes?            @relation("builds_classID_2Toclasses", fields: [classID_2], references: [id], onUpdate: SetNull, map: "buildClassID_2")
  heritages                         heritages?          @relation(fields: [heritageID], references: [id], onUpdate: SetNull, map: "buildHeritageID")
  uniHeritages                      uniHeritages?       @relation(fields: [uniHeritageID], references: [id], onUpdate: SetNull, map: "buildUniHeritageID")
  users                             users?              @relation(fields: [userID], references: [id], onDelete: Cascade, map: "buildUserID")
  characters                        characters[]

  @@index([ancestryID], map: "buildAncestryID_idx")
  @@index([backgroundID], map: "buildBackgroundID_idx")
  @@index([classID_2], map: "buildClass2ID_idx")
  @@index([classID], map: "buildClassID_idx")
  @@index([heritageID], map: "buildHeritageID_idx")
  @@index([uniHeritageID], map: "buildUniHeritageID_idx")
  @@index([userID], map: "buildUserID_idx")
}

model accessTokens {
  id            Int                       @id @default(autoincrement())
  accessToken   String                    @unique(map: "accessToken_UNIQUE") @db.VarChar(90)
  clientID      String                    @db.VarChar(60)
  charID        Int
  accessRights  accessTokens_accessRights @default(READ_ONLY)
  createdAt     DateTime?                 @db.DateTime(0)
  updatedAt     DateTime?                 @db.DateTime(0)
  characters    characters                @relation(fields: [charID], references: [id], onDelete: Cascade, map: "accessToken_charID")
  apiClientApps apiClientApps             @relation(fields: [clientID], references: [clientID], onDelete: Cascade, map: "accessToken_clientID")

  @@index([charID], map: "accessToken_charID")
  @@index([clientID], map: "accessToken_clientID")
}

model ancestryBoosts {
  id              Int                            @id @default(autoincrement())
  ancestryID      Int?
  boostedAbility  ancestryBoosts_boostedAbility?
  homebrewID      Int?
  createdAt       DateTime?                      @db.DateTime(0)
  updatedAt       DateTime?                      @db.DateTime(0)
  homebrewBundles homebrewBundles?               @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "ancestryBoost_homebrewID")

  @@index([homebrewID], map: "ancestryBoost_homebrewID")
}

model ancestryFlaws {
  id              Int                          @id @default(autoincrement())
  ancestryID      Int?
  flawedAbility   ancestryFlaws_flawedAbility?
  homebrewID      Int?
  createdAt       DateTime?                    @db.DateTime(0)
  updatedAt       DateTime?                    @db.DateTime(0)
  homebrewBundles homebrewBundles?             @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "ancestryFlaw_homebrewID")

  @@index([homebrewID], map: "ancestryFlaw_homebrewID")
}

model ancestryLanguages {
  ancestryID      Int
  langID          Int
  isBonus         Boolean?         @default(false)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "ancestLang_homebrewID")
  languages       languages        @relation(fields: [langID], references: [id], onDelete: Cascade, map: "ancestLang_langID")

  @@id([ancestryID, langID])
  @@index([homebrewID], map: "ancestLang_homebrewID")
  @@index([langID], map: "ancestLang_langID_idx")
}

model animalCompanions {
  id                   Int                         @id @default(autoincrement())
  name                 String                      @db.VarChar(45)
  rarity               animalCompanions_rarity     @default(COMMON)
  description          String?                     @db.VarChar(800)
  size                 animalCompanions_size       @default(SMALL)
  a1Name               String?                     @db.VarChar(45)
  a1Type               animalCompanions_a1Type?
  a1Actions            animalCompanions_a1Actions?
  a1Tags               String?                     @db.VarChar(80)
  a1DmgDie             animalCompanions_a1DmgDie?
  a1DmgType            String?                     @db.VarChar(45)
  a2Name               String?                     @db.VarChar(45)
  a2Type               animalCompanions_a2Type?
  a2Actions            animalCompanions_a2Actions?
  a2Tags               String?                     @db.VarChar(80)
  a2DmgDie             animalCompanions_a2DmgDie?
  a2DmgType            String?                     @db.VarChar(45)
  a3Name               String?                     @db.VarChar(45)
  a3Type               animalCompanions_a3Type?
  a3Actions            animalCompanions_a3Actions?
  a3Tags               String?                     @db.VarChar(80)
  a3DmgDie             animalCompanions_a3DmgDie?
  a3DmgType            String?                     @db.VarChar(45)
  modStr               Int
  modDex               Int
  modCon               Int
  modInt               Int
  modWis               Int
  modCha               Int
  hitPoints            Int
  skills               String?                     @db.VarChar(120)
  senses               String?                     @db.VarChar(120)
  speeds               String?                     @db.VarChar(120)
  special              String?                     @db.VarChar(400)
  supportBenefit       String?                     @db.VarChar(800)
  advancedManeuver     String?                     @db.VarChar(45)
  isArchived           Boolean                     @default(false)
  contentSrc           String                      @default("CRB") @db.VarChar(45)
  homebrewID           Int?
  version              String?                     @db.VarChar(90)
  createdAt            DateTime?                   @db.DateTime(0)
  updatedAt            DateTime?                   @db.DateTime(0)
  homebrewBundles      homebrewBundles?            @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "animalComp_homebrewID")
  charAnimalCompanions charAnimalCompanions[]

  @@index([homebrewID], map: "animalComp_homebrewID_idx")
}

model apiClientApps {
  id           Int                        @id @default(autoincrement())
  userID       Int
  clientID     String                     @unique(map: "appID_UNIQUE") @db.VarChar(60)
  apiKey       String                     @unique(map: "apiKey_UNIQUE") @db.VarChar(60)
  appName      String                     @db.VarChar(120)
  redirectURI  String                     @db.VarChar(300)
  companyName  String?                    @db.VarChar(120)
  description  String?                    @db.VarChar(400)
  iconURL      String?                    @db.VarChar(300)
  accessRights apiClientApps_accessRights @default(READ_ONLY)
  createdAt    DateTime?                  @db.DateTime(0)
  updatedAt    DateTime?                  @db.DateTime(0)
  accessTokens accessTokens[]
  users        users                      @relation(fields: [userID], references: [id], onDelete: Cascade, map: "userID_appAPIAccess")

  @@index([userID], map: "userID_appAPIAccess")
}

model buildDataMappings {
  buildID        Int
  source         String    @db.VarChar(45)
  sourceType     String    @db.VarChar(45)
  sourceLevel    Int
  sourceCode     String    @db.VarChar(45)
  sourceCodeSNum String    @db.VarChar(60)
  value          String?   @db.VarChar(5100)
  createdAt      DateTime? @db.DateTime(0)
  updatedAt      DateTime? @db.DateTime(0)
  builds         builds    @relation(fields: [buildID], references: [id], onDelete: Cascade, map: "buildDataMapping_buildID")

  @@id([buildID, source, sourceType, sourceCode, sourceLevel, sourceCodeSNum])
  @@unique([buildID, source, sourceType, sourceLevel, sourceCode, sourceCodeSNum], map: "buildDataMappings_compKeys")
}

model calculatedStats {
  charID             Int        @id
  maxHP              Int?
  maxStamina         Int?
  maxResolve         Int?
  totalClassDC       Int?
  totalSpeed         Int?
  totalAC            Int?
  totalPerception    Int?
  totalSkills        String?    @db.VarChar(1000)
  totalSaves         String?    @db.VarChar(100)
  totalAbilityScores String?    @db.VarChar(250)
  weapons            String?    @db.VarChar(3000)
  conditions         String?    @db.VarChar(1000)
  generalInfo        String?    @db.VarChar(1000)
  createdAt          DateTime?  @db.DateTime(0)
  updatedAt          DateTime?  @db.DateTime(0)
  characters         characters @relation(fields: [charID], references: [id], onDelete: Cascade, map: "calcStats_charID")
}

model campaignAccessTokens {
  id         Int        @id @default(autoincrement())
  campaignID Int
  charID     Int        @unique(map: "charID_UNIQUE")
  userID     Int
  createdAt  String?    @db.VarChar(45)
  updatedAt  String?    @db.VarChar(45)
  campaigns  campaigns  @relation(fields: [campaignID], references: [id], onDelete: Cascade, map: "campaignID_campacctoken")
  characters characters @relation(fields: [charID], references: [id], onDelete: Cascade, map: "charID_campacctoken")
  users      users      @relation(fields: [userID], references: [id], onDelete: Cascade, map: "userID_campacctoken")

  @@index([campaignID], map: "campaignID_campacctoken_idx")
  @@index([charID], map: "charID_campacctoken_idx")
  @@index([userID], map: "userID_campacctoken_idx")
}

model charAnimalCompanions {
  id                Int              @id @default(autoincrement())
  charID            Int
  animalCompanionID Int
  age               String           @default("YOUNG") @db.VarChar(350)
  specialization    String           @default("NONE") @db.VarChar(350)
  name              String           @default("") @db.VarChar(95)
  description       String           @db.Text
  imageURL          String           @default("") @db.VarChar(205)
  currentHP         Int              @default(0)
  createdAt         DateTime?        @db.DateTime(0)
  updatedAt         DateTime?        @db.DateTime(0)
  animalCompanions  animalCompanions @relation(fields: [animalCompanionID], references: [id], onDelete: Cascade, map: "charAnimComp_animID")
  characters        characters       @relation(fields: [charID], references: [id], onDelete: Cascade, map: "charAnimComp_charID")

  @@index([animalCompanionID], map: "charAnimComp_animID_idx")
  @@index([charID], map: "charAnimComp_charID_idx")
}

model charConditions {
  id                   Int              @id @default(autoincrement())
  charID               Int?
  conditionID          Int?
  value                Int?
  sourceText           String?          @db.VarChar(180)
  parentID             Int?
  createdAt            DateTime?        @db.DateTime(0)
  updatedAt            DateTime?        @db.DateTime(0)
  characters           characters?      @relation(fields: [charID], references: [id], onDelete: Cascade, map: "charCond_charID")
  conditions           conditions?      @relation(fields: [conditionID], references: [id], onDelete: Cascade, map: "charCond_conditionID")
  charConditions       charConditions?  @relation("charConditionsTocharConditions", fields: [parentID], references: [id], onDelete: Cascade, map: "charCond_parentID")
  other_charConditions charConditions[] @relation("charConditionsTocharConditions")

  @@index([charID], map: "charCond_charID_idx")
  @@index([conditionID], map: "charCond_conditionID_idx")
  @@index([parentID], map: "charCond_parentID_idx")
}

model charDataMappings {
  charID         Int
  source         String     @db.VarChar(45)
  sourceType     String     @db.VarChar(45)
  sourceLevel    Int
  sourceCode     String     @db.VarChar(45)
  sourceCodeSNum String     @db.VarChar(60)
  value          String?    @db.VarChar(5100)
  createdAt      DateTime?  @db.DateTime(0)
  updatedAt      DateTime?  @db.DateTime(0)
  characters     characters @relation(fields: [charID], references: [id], onDelete: Cascade, map: "charDataMappings_charID")

  @@id([charID, source, sourceType, sourceLevel, sourceCode, sourceCodeSNum])
  @@unique([charID, source, sourceType, sourceLevel, sourceCode, sourceCodeSNum], map: "charDataMappings_compKeys")
}

model charFamiliars {
  id            Int        @id @default(autoincrement())
  charID        Int
  name          String     @db.VarChar(95)
  description   String     @db.Text
  imageURL      String     @db.VarChar(205)
  currentHP     Int
  abilitiesJSON String     @default("[]") @db.VarChar(600)
  specificType  String?    @db.VarChar(45)
  createdAt     DateTime?  @db.DateTime(0)
  updatedAt     DateTime?  @db.DateTime(0)
  characters    characters @relation(fields: [charID], references: [id], onDelete: Cascade, map: "charFamiliar_charID")

  @@index([charID], map: "charFamiliar_charID_idx")
}

model classAbilities {
  id                   Int                        @id @default(autoincrement())
  classID              Int?
  name                 String?                    @db.VarChar(45)
  level                Int?
  description          String?                    @db.Text
  code                 String?                    @db.VarChar(3000)
  selectType           classAbilities_selectType? @default(NONE)
  selectOptionFor      Int?
  displayInSheet       Boolean                    @default(false)
  indivClassName       String?                    @db.VarChar(45)
  indivClassAbilName   String?                    @db.VarChar(45)
  isArchived           Boolean                    @default(false)
  contentSrc           String                     @default("CRB") @db.VarChar(45)
  homebrewID           Int?
  createdAt            DateTime?                  @db.DateTime(0)
  updatedAt            DateTime?                  @db.DateTime(0)
  classes              classes?                   @relation(fields: [classID], references: [id], onDelete: Cascade, map: "classAbil.classID")
  homebrewBundles      homebrewBundles?           @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "classAbil_homebrewID")
  classAbilities       classAbilities?            @relation("classAbilitiesToclassAbilities", fields: [selectOptionFor], references: [id], onDelete: Cascade, map: "classAbil_optionFor")
  other_classAbilities classAbilities[]           @relation("classAbilitiesToclassAbilities")

  @@index([classID], map: "classAbil.classID_idx")
  @@index([homebrewID], map: "classAbil_homebrewID")
  @@index([selectOptionFor], map: "classAbil_optionFor_idx")
}

model damageTypes {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(45)
  description String?   @db.TinyText
  createdAt   DateTime? @db.DateTime(0)
  updatedAt   DateTime? @db.DateTime(0)
}

model familiarAbilities {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(45)
  prerequisites   String?          @db.VarChar(200)
  requirements    String?          @db.VarChar(200)
  description     String?          @db.VarChar(1000)
  code            String?          @db.VarChar(600)
  isMaster        Boolean          @default(false)
  contentSrc      String           @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "familiarAbil_homebrewID")

  @@index([homebrewID], map: "familiarAbil_homebrewID_idx")
}

model homeBackReports {
  id              Int             @id @default(autoincrement())
  userID          Int?
  backgroundID    Int
  email           String?         @db.VarChar(65)
  message         String          @db.VarChar(512)
  createdAt       DateTime?       @db.DateTime(0)
  updatedAt       DateTime?       @db.DateTime(0)
  homeBackgrounds homeBackgrounds @relation(fields: [backgroundID], references: [id], onDelete: Cascade, map: "homeBackReport_backID")
  users           users?          @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "homeBackReport_userID")

  @@index([backgroundID], map: "homeBackReport_backID_idx")
  @@index([userID], map: "homeBackReport_userID_idx")
}

model homeBackgrounds {
  id              Int               @id @default(autoincrement())
  name            String?           @db.VarChar(45)
  artworkURL      String?           @db.VarChar(160)
  artistPage      String?           @db.VarChar(120)
  createdAt       DateTime?         @db.DateTime(0)
  updatedAt       DateTime?         @db.DateTime(0)
  homeBackReports homeBackReports[]
}

model homebrewBundles {
  id                  Int                   @id @default(autoincrement())
  userID              Int
  name                String                @default("Homebrew Bundle") @db.VarChar(45)
  description         String?               @db.Text
  contactInfo         String?               @db.VarChar(120)
  code                String?               @db.VarChar(10000)
  hasKeys             Boolean               @default(false)
  isPublished         Boolean               @default(false)
  authorName          String                @default("Unknown") @db.VarChar(45)
  createdAt           DateTime?             @db.DateTime(0)
  updatedAt           DateTime?             @db.DateTime(0)
  ancestries          ancestries[]
  ancestryBoosts      ancestryBoosts[]
  ancestryFlaws       ancestryFlaws[]
  ancestryLanguages   ancestryLanguages[]
  animalCompanions    animalCompanions[]
  archetypes          archetypes[]
  backgrounds         backgrounds[]
  classAbilities      classAbilities[]
  classArchetypes     classArchetypes[]
  classes             classes[]
  creatures           creatures[]
  domains             domains[]
  extras              extras[]
  familiarAbilities   familiarAbilities[]
  feats               feats[]
  heritages           heritages[]
  homebrewBundleKeys  homebrewBundleKeys[]
  users               users                 @relation(fields: [userID], references: [id], onDelete: Cascade, map: "homebrewBundleUserID")
  items               items[]
  languages           languages[]
  sheetStates         sheetStates[]
  specificFamiliars   specificFamiliars[]
  spells              spells[]
  tags                tags[]
  uniHeritages        uniHeritages[]
  userHomebrewBundles userHomebrewBundles[]

  @@index([userID], map: "homebrewBundleUserID")
}

model homebrewBundleKeys {
  homebrewID      Int
  keyCode         String          @db.VarChar(45)
  isOneTimeUse    Boolean         @default(false)
  createdAt       DateTime?       @db.DateTime(0)
  updatedAt       DateTime?       @db.DateTime(0)
  homebrewBundles homebrewBundles @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "homebrewBundleKey_homebrewID")

  @@id([homebrewID, keyCode])
}

model innateSpellCastings {
  innateSpellID String    @id @db.VarChar(120)
  timesCast     Int?
  createdAt     DateTime? @db.DateTime(0)
  updatedAt     DateTime? @db.DateTime(0)
}

model invItems {
  id                                                        Int                         @id @default(autoincrement())
  invID                                                     Int?
  itemID                                                    Int?
  name                                                      String?                     @db.VarChar(45)
  price                                                     Int?
  bulk                                                      Float?
  description                                               String?                     @db.Text
  size                                                      invItems_size?
  quantity                                                  Int?
  isShoddy                                                  Boolean                     @default(false)
  isDropped                                                 Boolean                     @default(false)
  currentHitPoints                                          Int?
  hitPoints                                                 Int?
  materialType                                              String?                     @db.VarChar(45)
  brokenThreshold                                           Int?
  hardness                                                  Int?
  code                                                      String?                     @db.VarChar(1000)
  itemTags                                                  String?                     @db.VarChar(405)
  bagInvItemID                                              Int?
  isInvested                                                Boolean                     @default(false)
  itemIsWeapon                                              Boolean                     @default(false)
  itemWeaponDieType                                         invItems_itemWeaponDieType?
  itemWeaponDamageType                                      String?                     @db.VarChar(45)
  itemWeaponRange                                           Int?
  itemWeaponReload                                          Int?
  itemWeaponAtkBonus                                        Int?
  itemWeaponDmgBonus                                        Int?
  itemIsStorage                                             Boolean                     @default(false)
  itemStorageMaxBulk                                        Float?
  fundRuneID                                                Int?
  fundPotencyRuneID                                         Int?
  propRune1ID                                               Int?
  propRune2ID                                               Int?
  propRune3ID                                               Int?
  propRune4ID                                               Int?
  createdAt                                                 DateTime?                   @db.DateTime(0)
  updatedAt                                                 DateTime?                   @db.DateTime(0)
  invItems                                                  invItems?                   @relation("invItemsToinvItems", fields: [bagInvItemID], references: [id], onDelete: Cascade, map: "invItem_bagItemID")
  other_invItems                                            invItems[]                  @relation("invItemsToinvItems")
  inventories_invItems_invIDToinventories                   inventories?                @relation("invItems_invIDToinventories", fields: [invID], references: [id], onDelete: Cascade, map: "invItem_invID")
  items                                                     items?                      @relation(fields: [itemID], references: [id], map: "invItem_itemID")
  inventories_invItemsToinventories_equippedArmorInvItemID  inventories[]               @relation("invItemsToinventories_equippedArmorInvItemID")
  inventories_invItemsToinventories_equippedShieldInvItemID inventories[]               @relation("invItemsToinventories_equippedShieldInvItemID")

  @@index([bagInvItemID], map: "invItem_bagInvItemID_idx")
  @@index([invID], map: "invItem_invID_idx")
  @@index([itemID], map: "invItem_itemID_idx")
}

model itemRunes {
  id            Int                   @id @default(autoincrement())
  itemID        Int?
  isFundamental Boolean               @default(false)
  etchedType    itemRunes_etchedType?
  createdAt     DateTime?             @db.DateTime(0)
  updatedAt     DateTime?             @db.DateTime(0)
  items         items?                @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "itemRune_itemID")

  @@index([itemID], map: "itemRune_itemID_idx")
}

model noteFields {
  id              Int        @id @default(autoincrement())
  charID          Int
  placeholderText String?    @default("") @db.VarChar(300)
  text            String?    @default("") @db.VarChar(3000)
  createdAt       DateTime?  @db.DateTime(0)
  updatedAt       DateTime?  @db.DateTime(0)
  characters      characters @relation(fields: [charID], references: [id], onDelete: Cascade, map: "noteField_charID")

  @@index([charID], map: "noteField_charID_idx")
}

model physicalFeatures {
  id                                                           Int          @id @default(autoincrement())
  name                                                         String?      @db.VarChar(45)
  description                                                  String?      @db.VarChar(1000)
  code                                                         String?      @db.VarChar(1000)
  itemWeaponID                                                 Int?
  overrides                                                    Int?
  createdAt                                                    DateTime?    @db.DateTime(0)
  updatedAt                                                    DateTime?    @db.DateTime(0)
  ancestries_ancestries_physicalFeatureOneIDTophysicalFeatures ancestries[] @relation("ancestries_physicalFeatureOneIDTophysicalFeatures")
  ancestries_ancestries_physicalFeatureTwoIDTophysicalFeatures ancestries[] @relation("ancestries_physicalFeatureTwoIDTophysicalFeatures")
  items                                                        items?       @relation(fields: [itemWeaponID], references: [id], onUpdate: SetNull, map: "physicalFeatures_itemID")

  @@index([itemWeaponID], map: "physicalFeatures_itemID_idx")
}

model senseTypes {
  id                                                  Int          @id @default(autoincrement())
  name                                                String?      @db.VarChar(45)
  description                                         String?      @db.Text
  isVisionType                                        Boolean?     @default(false)
  visionPrecedence                                    Int?
  createdAt                                           DateTime?    @db.DateTime(0)
  updatedAt                                           DateTime?    @db.DateTime(0)
  ancestries_ancestries_additionalSenseIDTosenseTypes ancestries[] @relation("ancestries_additionalSenseIDTosenseTypes")
  ancestries_ancestries_visionSenseIDTosenseTypes     ancestries[] @relation("ancestries_visionSenseIDTosenseTypes")
}

model sheetStates {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(90)
  description     String?          @db.VarChar(2000)
  code            String?          @db.VarChar(10000)
  contentSrc      String           @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "sheetStates_homebrewID")

  @@index([homebrewID])
}

model specificFamiliars {
  id              Int              @id @default(autoincrement())
  specificType    String           @db.VarChar(45)
  name            String           @db.VarChar(45)
  alignment       String?          @db.VarChar(90)
  tagsJSON        String           @default("[]") @db.VarChar(90)
  description     String?          @db.VarChar(1000)
  numAbils        Int              @default(0)
  abilsJSON       String           @default("[]") @db.VarChar(250)
  extraAbils      String?          @db.VarChar(4000)
  isArchived      Boolean          @default(false)
  contentSrc      String           @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  createdAt       DateTime?        @db.DateTime(0)
  updatedAt       DateTime?        @db.DateTime(0)
  homebrewBundles homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "familiar_homebrewID")

  @@index([homebrewID], map: "familiar_homebrewID")
}

model spellbookSpells {
  id              Int         @id @default(autoincrement())
  spellSRC        String?     @db.VarChar(45)
  charID          Int?
  spellID         Int?
  spellLevel      Int?
  spellType       String?     @db.VarChar(15)
  srcStructHashed Int?
  createdAt       DateTime?   @db.DateTime(0)
  updatedAt       DateTime?   @db.DateTime(0)
  characters      characters? @relation(fields: [charID], references: [id], onDelete: Cascade, map: "spellBookSpells_charID")
  spells          spells?     @relation(fields: [spellID], references: [id], onDelete: Cascade, map: "spellBookSpells_spellID")

  @@unique([spellSRC, charID, spellID, spellLevel], map: "scs_unique_three")
  @@index([charID])
  @@index([spellID])
}

model taggedExtras {
  extraID   Int
  tagID     Int
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  extras    extras    @relation(fields: [extraID], references: [id], onDelete: Cascade, map: "taggedExtra_extraID")
  tags      tags      @relation(fields: [tagID], references: [id], onDelete: Cascade, map: "taggedExtra_tagID")

  @@id([extraID, tagID])
  @@index([tagID], map: "taggedExtra_tagID_idx")
}

model taggedItems {
  itemID    Int
  tagID     Int
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  items     items     @relation(fields: [itemID], references: [id], onDelete: Cascade, map: "taggedItem_itemID")
  tags      tags      @relation(fields: [tagID], references: [id], onDelete: Cascade, map: "taggedItem_tagID")

  @@id([itemID, tagID])
  @@index([itemID], map: "itemApplied_itemID_idx")
  @@index([itemID, tagID], map: "taggedItem_compKeys")
  @@index([tagID], map: "taggedItem_tagID_idx")
}

model taggedSpells {
  spellID   Int
  tagID     Int
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  spells    spells    @relation(fields: [spellID], references: [id], onDelete: Cascade, map: "taggedSpell_spellID")
  tags      tags      @relation(fields: [tagID], references: [id], onDelete: Cascade, map: "taggedTag_tagID")

  @@id([spellID, tagID])
  @@unique([spellID, tagID], map: "taggedSpell_compKeys")
  @@index([spellID], map: "taggedSpell_spellID_idx")
  @@index([tagID], map: "taggedTag_tagID_idx")
}

model userHomebrewBundles {
  userID          Int
  homebrewID      Int
  createdAt       DateTime?       @db.DateTime(0)
  updatedAt       DateTime?       @db.DateTime(0)
  homebrewBundles homebrewBundles @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "userBundle_bundleID")
  users           users           @relation(fields: [userID], references: [id], onDelete: Cascade, map: "userBundle_userID")

  @@id([userID, homebrewID])
  @@index([homebrewID], map: "userBundle_bundleID")
}

model featTags {
  featID    Int
  tagID     Int
  createdAt DateTime? @db.DateTime(0)
  updatedAt DateTime? @db.DateTime(0)
  feats     feats     @relation(fields: [featID], references: [id], onDelete: Cascade, map: "featTag.featID")
  tags      tags      @relation(fields: [tagID], references: [id], onDelete: Cascade, map: "featTag.tagID")

  @@id([featID, tagID])
  @@index([tagID], map: "featTag.tagID_idx")
}

model archetypes {
  id               Int              @id @default(autoincrement())
  name             String?          @db.VarChar(45)
  description      String?          @db.Text
  dedicationFeatID Int?
  isMulticlass     Boolean
  tagID            Int?
  isArchived       Boolean          @default(false)
  contentSrc       String           @default("CRB") @db.VarChar(45)
  homebrewID       Int?
  version          String?          @db.VarChar(90)
  createdAt        DateTime?        @db.DateTime(0)
  updatedAt        DateTime?        @db.DateTime(0)
  feats            feats?           @relation(fields: [dedicationFeatID], references: [id], onUpdate: SetNull, map: "archetypes_dedicationFeatID")
  homebrewBundles  homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "archetypes_homebrewID")
  tags             tags?            @relation(fields: [tagID], references: [id], onUpdate: SetNull, map: "archetypes_tagID")

  @@index([dedicationFeatID])
  @@index([homebrewID])
  @@index([tagID])
}

model classArchetypes {
  id                  Int              @id @default(autoincrement())
  name                String?          @db.VarChar(45)
  description         String?          @db.Text
  replacementCodeJSON String?          @db.VarChar(20000)
  dedicationFeatName  String?          @db.VarChar(60)
  contentSrc          String           @default("CRB") @db.VarChar(45)
  homebrewID          Int?
  createdAt           DateTime?        @db.DateTime(0)
  updatedAt           DateTime?        @db.DateTime(0)
  homebrewBundles     homebrewBundles? @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "classArchetype_homebrewID")

  @@index([homebrewID], map: "classArchetype_homebrewID_idx")
}

model uniHeritages {
  id              Int                 @id @default(autoincrement())
  name            String?             @db.VarChar(45)
  rarity          uniHeritages_rarity @default(COMMON)
  description     String?             @db.Text
  tagID           Int?
  code            String?             @db.VarChar(1000)
  artworkURL      String?             @db.VarChar(200)
  isArchived      Boolean             @default(false)
  contentSrc      String              @default("CRB") @db.VarChar(45)
  homebrewID      Int?
  version         String?             @db.VarChar(90)
  createdAt       DateTime?           @db.DateTime(0)
  updatedAt       DateTime?           @db.DateTime(0)
  builds          builds[]
  characters      characters[]
  homebrewBundles homebrewBundles?    @relation(fields: [homebrewID], references: [id], onDelete: Cascade, map: "uniHeritage_homebrewID")
  tags            tags?               @relation(fields: [tagID], references: [id], onUpdate: SetNull, map: "uniHeritage_tagID")

  @@index([homebrewID], map: "uniHeritage_homebrewID_idx")
  @@index([tagID], map: "uniHeritage_tagID_idx")
}

enum ancestries_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum ancestries_size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum armors_armorType {
  N_A       @map("N/A")
  CLOTH
  LEATHER
  COMPOSITE
  CHAIN
  PLATE
}

enum armors_category {
  UNARMORED
  LIGHT
  MEDIUM
  HEAVY
}

enum backgrounds_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum classes_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum feats_actions {
  NONE
  FREE_ACTION
  REACTION
  ACTION
  TWO_ACTIONS
  THREE_ACTIONS
}

enum feats_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum feats_genericType {
  GENERAL_FEAT     @map("GENERAL-FEAT")
  SKILL_FEAT       @map("SKILL-FEAT")
  CLASS_FEAT       @map("CLASS-FEAT")
  ARCHETYPE_FEAT   @map("ARCHETYPE-FEAT")
  ANCESTRY_FEAT    @map("ANCESTRY-FEAT")
  BASIC_ACTION     @map("BASIC-ACTION")
  SKILL_ACTION     @map("SKILL-ACTION")
  CREATURE_ACTION  @map("CREATURE-ACTION")
  COMPANION_ACTION @map("COMPANION-ACTION")
}

enum heritages_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum creatures_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum creatures_size {
  TINY
  SMALL
  SMALL_MED  @map("SMALL-MED")
  MEDIUM
  LARGE
  MED_LARGE  @map("MED-LARGE")
  HUGE
  GARGANTUAN
}

enum items_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum items_hands {
  NONE
  ONE
  ONE_PLUS
  TWO
}

enum items_size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum items_itemStructType {
  GENERAL
  WEAPON
  ARMOR
  SHIELD
  STORAGE
  RUNE
}

enum skills_ability {
  STR
  DEX
  CON
  INT
  WIS
  CHA
}

enum spells_savingThrow {
  WILL
  BASIC_WILL
  FORT
  BASIC_FORT
  REFLEX
  BASIC_REFLEX
}

enum spells_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum extras_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum extras_size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum weapons_dieType {
  EMPTY_ENUM_VALUE @map("")
  d2
  d4
  d6
  d8
  d10
  d12
  d20
  NONE
}

enum weapons_category {
  UNARMED
  SIMPLE
  MARTIAL
  ADVANCED
}

enum weapons_meleeWeaponType {
  SWORD
  AXE
  CLUB
  FLAIL
  PICK
  POLEARM
  KNIFE
  SHIELD
  HAMMER
  SPEAR
  BRAWLING
}

enum items_itemType {
  POTION
  DRUG
  GADGET
  SIEGE
  ADJUSTMENT
  TATTOO
  FULU
  CATALYST
  SPELLHEART
  GRIMOIRE
  ARTIFACT
  GIFT
  BOMB
  EYEPIECE
  CIRCLET
  HAT
  BOOTS
  NECKLACE
  BRACERS
  CLOAK
  RING
  MASK
  GLOVES
  BELT
  ROD
  ELIXIR
  BOOK
  POISON
  COMPANION
  ARMOR
  STORAGE
  TOOL
  AMMUNITION
  OIL
  SCROLL
  STAFF
  STRUCTURE
  TALISMAN
  SNARE
  KIT
  INGREDIENT
  INSTRUMENT
  OTHER
  WEAPON
  SHIELD
  RUNE
  WAND
  CURRENCY
}

enum weapons_rangedWeaponType {
  DART
  BOW
  FIREARM
  SLING
  KNIFE
  BOMB
  CROSSBOW
}

enum ancestryBoosts_boostedAbility {
  Anything
  Strength
  Dexterity
  Constitution
  Intelligence
  Wisdom
  Charisma
}

enum ancestryFlaws_flawedAbility {
  Anything
  Strength
  Dexterity
  Constitution
  Intelligence
  Wisdom
  Charisma
}

enum animalCompanions_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}

enum itemRunes_etchedType {
  WEAPON
  ARMOR
}

enum accessTokens_accessRights {
  READ_ONLY              @map("READ-ONLY")
  READ_UPDATE            @map("READ-UPDATE")
  READ_UPDATE_ADD_DELETE @map("READ-UPDATE-ADD-DELETE")
}

enum animalCompanions_size {
  TINY
  SMALL
  SMALL_MED  @map("SMALL-MED")
  MEDIUM
  LARGE
  MED_LARGE  @map("MED-LARGE")
  HUGE
  GARGANTUAN
}

enum animalCompanions_a1Type {
  MELEE
  RANGED
}

enum classAbilities_selectType {
  NONE
  SELECTOR
  SELECT_OPTION
}

enum animalCompanions_a1Actions {
  NONE
  FREE_ACTION
  REACTION
  ACTION
  TWO_ACTIONS
  THREE_ACTIONS
}

enum invItems_size {
  TINY
  SMALL
  MEDIUM
  LARGE
  HUGE
  GARGANTUAN
}

enum animalCompanions_a1DmgDie {
  EMPTY_ENUM_VALUE @map("")
  d2
  d4
  d6
  d8
  d10
  d12
  d20
}

enum apiClientApps_accessRights {
  READ_ONLY              @map("READ-ONLY")
  READ_UPDATE            @map("READ-UPDATE")
  READ_UPDATE_ADD_DELETE @map("READ-UPDATE-ADD-DELETE")
}

enum animalCompanions_a2Type {
  MELEE
  RANGED
}

enum animalCompanions_a2Actions {
  NONE
  FREE_ACTION
  REACTION
  ACTION
  TWO_ACTIONS
  THREE_ACTIONS
}

enum animalCompanions_a2DmgDie {
  EMPTY_ENUM_VALUE @map("")
  d2
  d4
  d6
  d8
  d10
  d12
  d20
}

enum animalCompanions_a3Type {
  MELEE
  RANGED
}

enum animalCompanions_a3Actions {
  NONE
  FREE_ACTION
  REACTION
  ACTION
  TWO_ACTIONS
  THREE_ACTIONS
}

enum animalCompanions_a3DmgDie {
  EMPTY_ENUM_VALUE @map("")
  d2
  d4
  d6
  d8
  d10
  d12
  d20
}

enum invItems_itemWeaponDieType {
  EMPTY_ENUM_VALUE @map("")
  d2
  d4
  d6
  d8
  d10
  d12
  d20
  NONE
}

enum uniHeritages_rarity {
  COMMON
  UNCOMMON
  RARE
  UNIQUE
}
